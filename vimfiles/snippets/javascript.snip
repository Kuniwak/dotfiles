# Statement snippets {{{
snippet interface
  /**
   * Interface for ${1}.
   * @interface
   */
   ${2} = function() {};

snippet class
  /**
   * A class for ${1}.
   * @constructor
   */
  ${2} = function(${3}) {
    ${0}
  };

snippet sub
alias extends
  /**
   * A class for ${1}.
   * @constructor
   * @extends {${2:super}}
   */
  ${3:sub} = function(${4:args}) {
    goog.base(this${5:super_args});
    ${0}
  };
  goog.inherits($3, $2);

snippet inherits
  goog.inherits(${1:sub}, ${2:super});

snippet singleton
alias sing
  goog.addSingletonGetter(${1});

snippet extendsUiComponent
alias extuicom
  /**
   * A class for ${1}.
   * @param {goog.dom.DomHelper=} opt_domHelper Optional DOM helper, used for
   *     document interaction.
   * @constructor
   * @extends {goog.ui.Component}
   */
  ${2:sub} = function(${3:args}opt_domHelper) {
    goog.base(this, opt_domHelper);
    ${0}
  };
  goog.inherits($2, goog.ui.Component);

snippet extendsUiControl
alias extuictrl
  /**
   * A class for ${1}.
   * @param {goog.ui.ControlContent} content Text caption or DOM structure
   *     to display as the content of the component (if any).
   * @param {goog.ui.ControlRenderer=} opt_renderer Renderer used to render or
   *     decorate the component; defaults to {@link goog.ui.ControlRenderer}.
   * @param {goog.dom.DomHelper=} opt_domHelper Optional DOM helper, used for
   *     document interaction.
   * @constructor
   * @extends {goog.ui.Control}
   */
  ${2:sub} = function(${3:args}opt_renderer, opt_domHelper) {
    goog.base(this, content, opt_renderer, opt_domHelper);
    ${0}
  };
  goog.inherits($2, goog.ui.Control);

snippet req
alias require
  goog.require('${1}');

snippet reqgoog
  goog.require('goog.${1}');

snippet reqarr
  goog.require('goog.array');

snippet reqobj
  goog.require('goog.object');

snippet reqdom
  goog.require('goog.dom');

snippet reqev
  goog.require('goog.events${0}');

snippet requi
  goog.require('goog.ui${0}');

snippet provide
alias prov
  goog.provide('${1}');

snippet abstract
alias abs
  goog.abstractMethod

snippet nullfunction
alias nullfunc
  goog.nullFunction

snippet disposeInternal
  /** @override */
  ${1}.disposeInternal = function() {
    goog.base(this, 'disposeInternal');
    ${0}
  };

snippet enterDocument
  /** @override */
  ${1}.enterDocument = function() {
    goog.base(this, 'enterDocument');
    ${0}
  };

snippet exitDocument
  /** @override */
  ${1}.exitDocument = function() {
    goog.base(this, 'exitDocument');
    ${0}
  };

snippet decorateInternal
  /** @override */
  ${1}.decorateInternal = function(element) {
    goog.base(this, 'decorateInternal', element);
    ${0}
  };

snippet log
  console.log(${0});

snippet assert
  goog.assert.{0}

snippet eventtype
alias etp
  /**
   * Common events fired by ${1:class name}.
   * @enum {$2:type}
   */
  ${3}.EventType = {
    /** Dispatched ${4}. */
    ${5}
  };
# }}}

# Annotation snippets {{{
snippet override
  /** @override */

snippet license
  // This script licensed under the MIT.
  // http://orgachem.mit-license.org

snippet fileoverview
  /**
   * @fileoverview ${1}
   * @author orga.chem.job@gmail.com (OrgaChem)
   */

snippet jsdoc
  /**
   * ${1}
   */

# Row tags {{{
snippet supress
alias sup
  @supress {${1}}

snippet supressVisibility
alias supv
  @supress {visibility}

snippet constructor
alias ctor
  @constructor

snippet param
  @param {${1:type}} ${2:name} ${3:desc}

snippet return
  @return {${1:type}} ${2:desc}

snippet private
alias pv
  @private

snippet protected
alias pt
  @protected
# }}}
# }}}

